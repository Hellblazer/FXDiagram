diff --git a/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizLayoutProvider.java b/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizLayoutProvider.java
index e15ab0e..03da185 100644
--- a/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizLayoutProvider.java
+++ b/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizLayoutProvider.java
@@ -20,11 +20,14 @@
 import java.io.OutputStream;
 import java.util.Map;
 
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.emf.common.util.URI;
 import org.eclipse.emf.ecore.resource.Resource.Diagnostic;
 import org.eclipse.xtext.resource.SaveOptions;
 import org.eclipse.xtext.resource.XtextResource;
 import org.eclipse.xtext.resource.XtextResourceSet;
+
+import com.google.inject.Injector;
 
 import de.cau.cs.kieler.core.WrappedException;
 import de.cau.cs.kieler.core.alg.IKielerProgressMonitor;
@@ -36,6 +39,7 @@
 import de.cau.cs.kieler.kiml.formats.IGraphFormatHandler;
 import de.cau.cs.kieler.kiml.formats.TransformationData;
 import de.cau.cs.kieler.kiml.formats.GraphFormatsService;
+import de.cau.cs.kieler.kiml.graphviz.dot.GraphvizDotStandaloneSetup;
 import de.cau.cs.kieler.kiml.graphviz.dot.dot.GraphvizModel;
 import de.cau.cs.kieler.kiml.graphviz.dot.transform.Command;
 import de.cau.cs.kieler.kiml.graphviz.dot.transform.DotExporter;
@@ -76,18 +80,30 @@
         graphvizTool = new GraphvizTool(command);
         // the dot format handler is indirectly fetched in order to ensure proper injection
         IGraphFormatHandler<?> handler = null;
-        GraphFormatData formatData = GraphFormatsService.getInstance().getFormatData(
-                DotFormatHandler.ID);
-        if (formatData != null) {
-            handler = formatData.getHandler();
-        }
-        if (handler instanceof DotFormatHandler) {
-            dotHandler = (DotFormatHandler) handler;
+        if(Platform.isRunning()) {
+	        GraphFormatData formatData = GraphFormatsService.getInstance().getFormatData(
+	                DotFormatHandler.ID);
+	        if (formatData != null) {
+	            handler = formatData.getHandler();
+	        }
+	        if (handler instanceof DotFormatHandler) {
+	            dotHandler = (DotFormatHandler) handler;
+	        } else {
+	            throw new IllegalStateException("The Graphviz Dot language support is not available.");
+	        }
         } else {
-            throw new IllegalStateException("The Graphviz Dot language support is not available.");
+        	dotHandler = getInjector().getInstance(DotFormatHandler.class);
         }
     }
     
+    private Injector injector;
+    
+    private Injector getInjector() {
+    	if(injector == null) 
+    		injector = new GraphvizDotStandaloneSetup().createInjectorAndDoEMFRegistration();
+       	 return injector;
+    }
+
     /**
      * {@inheritDoc}
      */
diff --git a/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizTool.java b/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizTool.java
index 3f755fc..60cb81b 100644
--- a/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizTool.java
+++ b/plugins/de.cau.cs.kieler.kiml.graphviz.layouter/src/de/cau/cs/kieler/kiml/graphviz/layouter/GraphvizTool.java
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.swt.widgets.Display;
@@ -197,14 +198,17 @@
      * @return path to the dot executable, or {@code null} if the executable was not found
      */
     public static String getDotExecutable(final boolean promptUser) {
-        // load the graphviz path from the preferences, if any
-        IPreferenceStore preferenceStore = GraphvizLayouterPlugin.getDefault().getPreferenceStore();
-        String dotExecutable = preferenceStore.getString(PREF_GRAPHVIZ_EXECUTABLE);
-        File dotFile = new File(dotExecutable);
-        if (dotFile.exists() && dotFile.canExecute()) {
-            return dotExecutable;
-        }
-        
+    	String dotExecutable;
+    	File dotFile;
+    	if(Platform.isRunning()) {
+	        // load the graphviz path from the preferences, if any
+	        IPreferenceStore preferenceStore = GraphvizLayouterPlugin.getDefault().getPreferenceStore();
+	        dotExecutable = preferenceStore.getString(PREF_GRAPHVIZ_EXECUTABLE);
+	        dotFile = new File(dotExecutable);
+	        if (dotFile.exists() && dotFile.canExecute()) {
+	            return dotExecutable;
+	        }
+    	}
         // look in a selection of default locations where it might be installed
         for (String location : DEFAULT_LOCS) {
             // Linux
@@ -222,9 +226,10 @@
             }
         }
         
-        if (promptUser) {
+        if (promptUser && Platform.isRunning()) {
             if (handleExecPath()) {
                 // fetch the executable string again after the user has entered a new path
+    	        IPreferenceStore preferenceStore = GraphvizLayouterPlugin.getDefault().getPreferenceStore();
                 dotExecutable = preferenceStore.getString(PREF_GRAPHVIZ_EXECUTABLE);
                 dotFile = new File(dotExecutable);
                 if (dotFile.exists() && dotFile.canExecute()) {
@@ -506,11 +511,14 @@
                 }
                 
                 // retrieve the current timeout value
-                IPreferenceStore preferenceStore =
-                        GraphvizLayouterPlugin.getDefault().getPreferenceStore();
-                int timeout = preferenceStore.getInt(PREF_TIMEOUT);
-                if (timeout < PROCESS_MIN_TIMEOUT) {
-                    timeout = PROCESS_DEF_TIMEOUT;
+                int timeout = PROCESS_DEF_TIMEOUT;
+                if(Platform.isRunning()) {
+                	IPreferenceStore preferenceStore =
+                			GraphvizLayouterPlugin.getDefault().getPreferenceStore();
+                	int timeoutPreference = preferenceStore.getInt(PREF_TIMEOUT);
+                	if (timeoutPreference >= PROCESS_MIN_TIMEOUT) {
+                		timeout = timeoutPreference;
+                	}
                 }
                 
                 boolean interrupted = false;
@@ -534,7 +542,6 @@
                 
             } while (watchdog != null);
         }
-        
     }
 
 }
