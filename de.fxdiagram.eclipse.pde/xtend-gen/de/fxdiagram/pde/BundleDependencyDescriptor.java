package de.fxdiagram.pde;

import com.google.common.base.Objects;
import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.mapping.AbstractMappedElementDescriptor;
import de.fxdiagram.pde.BundleDependency;
import de.fxdiagram.pde.BundleDescriptorProvider;
import de.fxdiagram.pde.BundleUtil;
import java.util.Collections;
import javafx.beans.property.ReadOnlyObjectProperty;
import javafx.beans.property.ReadOnlyObjectWrapper;
import org.apache.log4j.Logger;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@ModelNode("kind")
@SuppressWarnings("all")
public class BundleDependencyDescriptor extends AbstractMappedElementDescriptor<BundleDependency> {
  private final static Logger LOG = Logger.getLogger(BundleDependencyDescriptor.class);
  
  public BundleDependencyDescriptor(final BundleDependency.Kind kind, final String ownerSymbolicName, final String ownerVersion, final String importSymbolicName, final String importVersionRange, final String mappingConfigID, final String mappingID, final BundleDescriptorProvider provider) {
    super(IterableExtensions.join(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(ownerSymbolicName, ownerVersion, importSymbolicName, importVersionRange)), "#"), 
      ((importSymbolicName + " ") + importVersionRange), mappingConfigID, mappingID, provider);
    this.kindProperty.set(kind);
  }
  
  @Override
  public <U extends Object> U withDomainObject(final Function1<? super BundleDependency, ? extends U> lambda) {
    U _xblockexpression = null;
    {
      BundleDependency.Kind _kind = this.getKind();
      String _ownerSymbolicName = this.getOwnerSymbolicName();
      String _ownerVersion = this.getOwnerVersion();
      String _importSymbolicName = this.getImportSymbolicName();
      String _importVersionRange = this.getImportVersionRange();
      final BundleDependency dependency = BundleUtil.findBundleDependency(_kind, _ownerSymbolicName, _ownerVersion, _importSymbolicName, _importVersionRange);
      U _xifexpression = null;
      boolean _notEquals = (!Objects.equal(dependency, null));
      if (_notEquals) {
        _xifexpression = lambda.apply(dependency);
      } else {
        Object _xblockexpression_1 = null;
        {
          BundleDependencyDescriptor.LOG.warn(("Invalid descriptor " + this));
          _xblockexpression_1 = null;
        }
        _xifexpression = ((U)_xblockexpression_1);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String getOwnerSymbolicName() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>head(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  public String getOwnerVersion() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return _split[1];
  }
  
  public String getImportSymbolicName() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return _split[2];
  }
  
  public String getImportVersionRange() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  @Override
  public Object openInEditor(final boolean select) {
    return null;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public BundleDependencyDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
    modelElement.addProperty(kindProperty, BundleDependency.Kind.class);
  }
  
  private ReadOnlyObjectWrapper<BundleDependency.Kind> kindProperty = new ReadOnlyObjectWrapper<BundleDependency.Kind>(this, "kind");
  
  public BundleDependency.Kind getKind() {
    return this.kindProperty.get();
  }
  
  public ReadOnlyObjectProperty<BundleDependency.Kind> kindProperty() {
    return this.kindProperty.getReadOnlyProperty();
  }
}
