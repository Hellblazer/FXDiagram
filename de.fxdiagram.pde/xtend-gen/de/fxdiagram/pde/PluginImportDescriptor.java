package de.fxdiagram.pde;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.DomainObjectProvider;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.pde.PluginDescriptorProvider;
import de.fxdiagram.xtext.glue.mapping.AbstractMappedElementDescriptor;
import java.util.Collections;
import org.eclipse.pde.core.plugin.IPluginImport;
import org.eclipse.ui.IEditorPart;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@ModelNode
@SuppressWarnings("all")
public class PluginImportDescriptor extends AbstractMappedElementDescriptor<IPluginImport> {
  public PluginImportDescriptor(final String ownerSymbolicName, final String ownerVersion, final String importSymbolicName, final String importVersionRange, final String mappingConfigID, final String mappingID, final PluginDescriptorProvider provider) {
    super(IterableExtensions.join(Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(ownerSymbolicName, ownerVersion, importSymbolicName, importVersionRange)), "#"), 
      ((importSymbolicName + " ") + importVersionRange), mappingConfigID, mappingID, provider);
  }
  
  public <U extends Object> U withDomainObject(final Function1<? super IPluginImport, ? extends U> lambda) {
    U _xblockexpression = null;
    {
      DomainObjectProvider _provider = this.getProvider();
      String _ownerSymbolicName = this.getOwnerSymbolicName();
      String _ownerVersion = this.getOwnerVersion();
      String _importSymbolicName = this.getImportSymbolicName();
      final IPluginImport handle = ((PluginDescriptorProvider) _provider).getPluginImport(_ownerSymbolicName, _ownerVersion, _importSymbolicName);
      _xblockexpression = lambda.apply(handle);
    }
    return _xblockexpression;
  }
  
  public String getOwnerSymbolicName() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>head(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  public String getOwnerVersion() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return _split[1];
  }
  
  public String getImportSymbolicName() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return _split[2];
  }
  
  public String getImportVersionRange() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  public IEditorPart openInEditor(final boolean select) {
    return null;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public PluginImportDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
}
