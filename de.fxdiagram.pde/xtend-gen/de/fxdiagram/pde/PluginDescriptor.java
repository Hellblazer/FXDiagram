package de.fxdiagram.pde;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.pde.PluginDescriptorProvider;
import de.fxdiagram.pde.PluginUtil;
import de.fxdiagram.xtext.glue.mapping.AbstractMappedElementDescriptor;
import org.eclipse.pde.core.plugin.IPluginModelBase;
import org.eclipse.ui.IEditorPart;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@ModelNode
@SuppressWarnings("all")
public class PluginDescriptor extends AbstractMappedElementDescriptor<IPluginModelBase> {
  public PluginDescriptor(final String symbolicName, final String version, final String name, final String mappingConfigID, final String mappingID, final PluginDescriptorProvider provider) {
    super(((symbolicName + "#") + version), name, mappingConfigID, mappingID, provider);
  }
  
  public <U extends Object> U withDomainObject(final Function1<? super IPluginModelBase, ? extends U> lambda) {
    U _xblockexpression = null;
    {
      String _symbolicName = this.getSymbolicName();
      String _version = this.getVersion();
      final IPluginModelBase plugin = PluginUtil.findPlugin(_symbolicName, _version);
      _xblockexpression = lambda.apply(plugin);
    }
    return _xblockexpression;
  }
  
  public String getSymbolicName() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>head(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  public String getVersion() {
    String _id = this.getId();
    String[] _split = _id.split("#");
    return IterableExtensions.<String>last(((Iterable<String>)Conversions.doWrapArray(_split)));
  }
  
  public IEditorPart openInEditor(final boolean select) {
    return null;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public PluginDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    super.populate(modelElement);
  }
}
