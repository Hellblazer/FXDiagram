package de.fxdiagram.core.services;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.extensions.UriExtensions;
import de.fxdiagram.core.model.DomainObjectDescriptor;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.services.ResourceHandle;
import de.fxdiagram.core.services.ResourceProvider;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

@ModelNode({ "classLoaderId", "className", "relativePath" })
@SuppressWarnings("all")
public class ResourceDescriptor implements DomainObjectDescriptor {
  private ResourceProvider provider;
  
  public ResourceDescriptor(final String classLoaderId, final String className, final String relativePath, final String name, final ResourceProvider provider) {
    this.setRelativePath(relativePath);
    this.setClassLoaderId(classLoaderId);
    this.setClassName(className);
    this.setName(name);
    this.provider = provider;
  }
  
  public ResourceHandle getDomainObject() {
    return this.provider.resolveResourceHandle(this);
  }
  
  public String getId() {
    String _classLoaderId = this.getClassLoaderId();
    String _plus = (_classLoaderId + ":");
    String _className = this.getClassName();
    String _plus_1 = (_plus + _className);
    String _plus_2 = (_plus_1 + ":");
    String _relativePath = this.getRelativePath();
    return (_plus_2 + _relativePath);
  }
  
  public String toURI() {
    String _xblockexpression = null;
    {
      final ResourceHandle handle = this.getDomainObject();
      Class<?> _context = handle.getContext();
      String _relativePath = handle.getRelativePath();
      _xblockexpression = UriExtensions.toURI(_context, _relativePath);
    }
    return _xblockexpression;
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public ResourceDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    modelElement.addProperty(classLoaderIdProperty, String.class);
    modelElement.addProperty(classNameProperty, String.class);
    modelElement.addProperty(relativePathProperty, String.class);
  }
  
  private SimpleStringProperty classLoaderIdProperty = new SimpleStringProperty(this, "classLoaderId");
  
  public String getClassLoaderId() {
    return this.classLoaderIdProperty.get();
  }
  
  public void setClassLoaderId(final String classLoaderId) {
    this.classLoaderIdProperty.set(classLoaderId);
  }
  
  public StringProperty classLoaderIdProperty() {
    return this.classLoaderIdProperty;
  }
  
  private SimpleStringProperty classNameProperty = new SimpleStringProperty(this, "className");
  
  public String getClassName() {
    return this.classNameProperty.get();
  }
  
  public void setClassName(final String className) {
    this.classNameProperty.set(className);
  }
  
  public StringProperty classNameProperty() {
    return this.classNameProperty;
  }
  
  private SimpleStringProperty relativePathProperty = new SimpleStringProperty(this, "relativePath");
  
  public String getRelativePath() {
    return this.relativePathProperty.get();
  }
  
  public void setRelativePath(final String relativePath) {
    this.relativePathProperty.set(relativePath);
  }
  
  public StringProperty relativePathProperty() {
    return this.relativePathProperty;
  }
  
  private SimpleStringProperty nameProperty = new SimpleStringProperty(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public void setName(final String name) {
    this.nameProperty.set(name);
  }
  
  public StringProperty nameProperty() {
    return this.nameProperty;
  }
}
