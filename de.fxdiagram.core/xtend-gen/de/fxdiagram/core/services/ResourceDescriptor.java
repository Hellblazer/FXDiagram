package de.fxdiagram.core.services;

import de.fxdiagram.annotations.properties.ModelNode;
import de.fxdiagram.core.extensions.ClassLoaderExtensions;
import de.fxdiagram.core.model.DomainObjectDescriptor;
import de.fxdiagram.core.model.ModelElementImpl;
import de.fxdiagram.core.services.ResourceHandle;
import de.fxdiagram.core.services.ResourceProvider;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

@ModelNode({ "name", "classLoaderClassName", "relativePath", "provider" })
@SuppressWarnings("all")
public class ResourceDescriptor implements DomainObjectDescriptor {
  public ResourceDescriptor(final String classLoaderClassName, final String relativePath, final String name, final ResourceProvider provider) {
    this.setRelativePath(relativePath);
    this.setClassLoaderClassName(classLoaderClassName);
    this.setName(name);
    this.setProvider(provider);
  }
  
  public String getId() {
    String _classLoaderClassName = this.getClassLoaderClassName();
    String _plus = (_classLoaderClassName + "/");
    String _relativePath = this.getRelativePath();
    return (_plus + _relativePath);
  }
  
  public String toURI() {
    ResourceProvider _provider = this.getProvider();
    ResourceHandle _resolveResourceHandle = _provider.resolveResourceHandle(this);
    Class<?> _context = _resolveResourceHandle.getContext();
    String _relativePath = this.getRelativePath();
    return ClassLoaderExtensions.toURI(_context, _relativePath);
  }
  
  /**
   * Automatically generated by @ModelNode. Needed for deserialization.
   */
  public ResourceDescriptor() {
  }
  
  public void populate(final ModelElementImpl modelElement) {
    modelElement.addProperty(nameProperty, String.class);
    modelElement.addProperty(classLoaderClassNameProperty, String.class);
    modelElement.addProperty(relativePathProperty, String.class);
    modelElement.addProperty(providerProperty, ResourceProvider.class);
  }
  
  private SimpleStringProperty classLoaderClassNameProperty = new SimpleStringProperty(this, "classLoaderClassName");
  
  public String getClassLoaderClassName() {
    return this.classLoaderClassNameProperty.get();
  }
  
  public void setClassLoaderClassName(final String classLoaderClassName) {
    this.classLoaderClassNameProperty.set(classLoaderClassName);
  }
  
  public StringProperty classLoaderClassNameProperty() {
    return this.classLoaderClassNameProperty;
  }
  
  private SimpleStringProperty relativePathProperty = new SimpleStringProperty(this, "relativePath");
  
  public String getRelativePath() {
    return this.relativePathProperty.get();
  }
  
  public void setRelativePath(final String relativePath) {
    this.relativePathProperty.set(relativePath);
  }
  
  public StringProperty relativePathProperty() {
    return this.relativePathProperty;
  }
  
  private SimpleStringProperty nameProperty = new SimpleStringProperty(this, "name");
  
  public String getName() {
    return this.nameProperty.get();
  }
  
  public void setName(final String name) {
    this.nameProperty.set(name);
  }
  
  public StringProperty nameProperty() {
    return this.nameProperty;
  }
  
  private SimpleObjectProperty<ResourceProvider> providerProperty = new SimpleObjectProperty<ResourceProvider>(this, "provider");
  
  public ResourceProvider getProvider() {
    return this.providerProperty.get();
  }
  
  public void setProvider(final ResourceProvider provider) {
    this.providerProperty.set(provider);
  }
  
  public ObjectProperty<ResourceProvider> providerProperty() {
    return this.providerProperty;
  }
}
